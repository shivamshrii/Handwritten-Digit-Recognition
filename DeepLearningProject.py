# -*- coding: utf-8 -*-
"""AiProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VVlpHXZ9S_UDk7LuXEQ0RPOh9rdMvpIz
"""

!pip install scikit-learn

#!/usr/bin/python

# Import the necessary modules
import cv2
import joblib
from skimage.feature import hog
import numpy as np
import matplotlib.pyplot as plt

# Function to visualize HOG features
def visualize_hog(image):
    # Compute HOG features and the HOG image for visualization
    fd, hog_image = hog(image, orientations=9, pixels_per_cell=(14, 14),
                        cells_per_block=(1, 1), visualize=True, block_norm="L2-Hys")

    # Plot the original and HOG image side by side
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharex=True, sharey=True)

    ax1.axis('off')
    ax1.imshow(image, cmap='gray')
    ax1.set_title('Input Image')

    ax2.axis('off')
    ax2.imshow(hog_image, cmap='gray')
    ax2.set_title('HOG Features')
    plt.show()

# Define the path to the classifier file and the input image directly
classifier_path = "/content/digits_cls (2).pkl"  # Replace with your classifier file path
image_path = "/content/WhatsApp Image 2024-09-06 at 3.12.42 PM.jpeg"  # Replace with your image file path

# Load the classifier
clf, pp = joblib.load(classifier_path)

# Read the input image
im = cv2.imread(image_path)

# Convert to grayscale and apply Gaussian filtering
im_gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
im_gray = cv2.GaussianBlur(im_gray, (5, 5), 0)

# Threshold the image
ret, im_th = cv2.threshold(im_gray, 90, 255, cv2.THRESH_BINARY_INV)

# Find contours in the image
ctrs, hier = cv2.findContours(im_th.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Get rectangles containing each contour
rects = [cv2.boundingRect(ctr) for ctr in ctrs]

# For each rectangular region, calculate HOG features and predict
for rect in rects:
    # Draw the rectangles
    cv2.rectangle(im, (rect[0], rect[1]), (rect[0] + rect[2], rect[1] + rect[3]), (0, 255, 0), 3)

    # Make the rectangular region around the digit
    leng = int(rect[3] * 1.6)
    pt1 = max(0, rect[1] + rect[3] // 2 - leng // 2)
    pt2 = max(0, rect[0] + rect[2] // 2 - leng // 2)
    roi = im_th[pt1:pt1+leng, pt2:pt2+leng]

    # Resize the image
    roi = cv2.resize(roi, (28, 28), interpolation=cv2.INTER_AREA)
    roi = cv2.dilate(roi, (3, 3))

    # Visualize the HOG features for each ROI
    visualize_hog(roi)

    # Calculate the HOG features
    roi_hog_fd = hog(roi, orientations=9, pixels_per_cell=(14, 14), cells_per_block=(1, 1), visualize=False)
    roi_hog_fd = pp.transform(np.array([roi_hog_fd], dtype='float64'))

    # Predict the digit
    nbr = clf.predict(roi_hog_fd)
    cv2.putText(im, str(int(nbr[0])), (rect[0], rect[1]), cv2.FONT_HERSHEY_DUPLEX, 2, (0, 255, 255), 3)

# Display the resulting image with rectangular ROIs
cv2.namedWindow("Resulting Image with Rectangular ROIs", cv2.WINDOW_NORMAL)
cv2.imshow("Resulting Image with Rectangular ROIs", im)
cv2.waitKey(0)
cv2.destroyAllWindows()